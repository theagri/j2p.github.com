<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: node.js | J2P Blog]]></title>
  <link href="http://J2P.github.com/blog/categories/node-js/atom.xml" rel="self"/>
  <link href="http://J2P.github.com/"/>
  <updated>2012-04-03T13:16:35+09:00</updated>
  <id>http://J2P.github.com/</id>
  <author>
    <name><![CDATA[J2P]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Node.js 이용해서 chat을 만들어보자[3]]]></title>
    <link href="http://J2P.github.com/blog/2011/11/29/node-chat3/"/>
    <updated>2011-11-29T04:42:00+09:00</updated>
    <id>http://J2P.github.com/blog/2011/11/29/node-chat3</id>
    <content type="html"><![CDATA[<p>오늘은 닉네임 입력을 하고 로그인을 하고 페이지를 빠져나오게 되면 로그아웃이 되는걸 구현해 볼까 한다.</p>

<p>소스는 다음과 같이 수정을 하면 된다.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>server.js  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">).</span><span class="nx">createServer</span><span class="p">(</span><span class="nx">handler</span><span class="p">).</span><span class="nx">listen</span><span class="p">(</span><span class="mi">5023</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,</span> <span class="nx">io</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;socket.io&#39;</span><span class="p">).</span><span class="nx">listen</span><span class="p">(</span><span class="nx">app</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,</span> <span class="nx">nicklist</span> <span class="o">=</span> <span class="p">{};</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">function</span> <span class="nx">handler</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">__dirname</span> <span class="o">+</span> <span class="s1">&#39;/index.html&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">500</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="s1">&#39;Error loading index.html&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">res</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span> <span class="s1">&#39;Content-Type&#39;</span><span class="o">:</span> <span class="s1">&#39;text/html&#39;</span><span class="p">});</span>
</span><span class='line'><span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">io</span><span class="p">.</span><span class="nx">sockets</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;connection&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">socket</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;join&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">nick</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">nicklist</span><span class="p">[</span><span class="nx">nick</span><span class="p">]</span> <span class="o">=</span> <span class="nx">socket</span><span class="p">.</span><span class="nx">nickname</span> <span class="o">=</span> <span class="nx">nick</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">socket</span><span class="p">.</span><span class="nx">broadcast</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;joinok&#39;</span><span class="p">,</span> <span class="nx">nick</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">io</span><span class="p">.</span><span class="nx">sockets</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;nicknames&#39;</span><span class="p">,</span> <span class="nx">nicklist</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;disconnect&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">delete</span> <span class="nx">nicklist</span><span class="p">[</span><span class="nx">socket</span><span class="p">.</span><span class="nx">nickname</span><span class="p">];</span>
</span><span class='line'>    <span class="nx">socket</span><span class="p">.</span><span class="nx">broadcast</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;nicknames&#39;</span><span class="p">,</span><span class="nx">nicklist</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>index.html  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="ni">&amp;lt;</span>!DOCTYPE html&gt;
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>meta charset=&quot;utf-8&quot;<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>title<span class="ni">&amp;gt;</span>JP Chat<span class="ni">&amp;lt;</span>/title<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>script src=&quot;http://code.jquery.com/jquery-1.7.min.js&quot;<span class="ni">&amp;gt;&amp;lt;</span>/script<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>script src=&quot;http://J2P.github.com/socket.io/socket.io.js&quot;<span class="ni">&amp;gt;&amp;lt;</span>/script<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span>//기존 소스에서
</span><span class='line'><span class="ni">&amp;lt;</span>form id=&quot;set-nickname&quot;<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>label<span class="ni">&amp;gt;</span>NickName : <span class="ni">&amp;lt;</span>/label<span class="ni">&amp;gt;&amp;lt;</span>input type=&quot;text&quot; id=&quot;nick&quot; /<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>button id=&quot;join&quot;<span class="ni">&amp;gt;</span>Join<span class="ni">&amp;lt;</span>/button<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/form<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>div id=&quot;nicknames&quot;<span class="ni">&amp;gt;&amp;lt;</span>ul<span class="ni">&amp;gt;&amp;lt;</span>/ul<span class="ni">&amp;gt;&amp;lt;</span>/div<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>script<span class="ni">&amp;gt;</span>
</span><span class='line'>    (function($){
</span><span class='line'>        var socket = io.connect(&#39;localhost:5023&#39;);
</span><span class='line'>
</span><span class='line'>        socket.on(&#39;joinok&#39;, function(nick){
</span><span class='line'>            $(&quot;ul&quot;, &quot;#nicknames&quot;).append(&quot;<span class="ni">&amp;lt;</span>li<span class="ni">&amp;gt;</span>&quot;+nick+&quot;<span class="ni">&amp;lt;</span>/li<span class="ni">&amp;gt;</span>&quot;);
</span><span class='line'>        });
</span><span class='line'>
</span><span class='line'>        socket.on(&#39;nicknames&#39;, function(data) {
</span><span class='line'>            var nicklist = $(&quot;ul&quot;, &quot;#nicknames&quot;).empty();
</span><span class='line'>
</span><span class='line'>            for (var i in data) {
</span><span class='line'>                $(&quot;ul&quot;, &quot;#nicknames&quot;).append(&quot;<span class="ni">&amp;lt;</span>li<span class="ni">&amp;gt;</span>&quot;+data[i]+&quot;<span class="ni">&amp;lt;</span>/li<span class="ni">&amp;gt;</span>&quot;);
</span><span class='line'>            }
</span><span class='line'>        });
</span><span class='line'>
</span><span class='line'>        $(&quot;#join&quot;).on({
</span><span class='line'>            click: function() {
</span><span class='line'>                var nick = $(&quot;#nick&quot;);
</span><span class='line'>                if (nick.val() == &quot;&quot;) {
</span><span class='line'>                    alert(&#39;NickName 을 입력해주세요.&#39;);
</span><span class='line'>                    nick.focus();
</span><span class='line'>                    return false;
</span><span class='line'>                } else {
</span><span class='line'>                    socket.emit(&#39;join&#39;, nick.val());
</span><span class='line'>                    nick.val(&quot;&quot;);
</span><span class='line'>                }
</span><span class='line'>
</span><span class='line'>                return false;
</span><span class='line'>            }
</span><span class='line'>        });
</span><span class='line'>    })(jQuery);
</span><span class='line'><span class="ni">&amp;lt;</span>/script<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>server.js 소스에 보면 on Method 와  emit Method가 있는데 간단하게 생각하면 된다 on Method는 받는거고 emit Method는 보내는 거다 라고 생각하면 된다.</p>

<p>index.html 에서 join 이라는 이벤트를 server로 요청(emit)을 하게 되면 서버에서는 join 이벤트가 실행이(on) 된다.</p>

<p>인자값으로 넘어온 nick 을 미리 선언된 nicklist 객체에 넣는다. 배열로 하지 않고 객체로 하는 이유는 중복을 막기 위함이다. 배열로 해도 막을 수는 있지만 막으려면 또 과정을 거쳐야 하기 때문에 간단하게 key : value 로 넣어서 같은 닉네임이 있으면 덮어 씌워지는 것이다.</p>

<p>또 socket.nickname 에 추가로 nick 을 넣어줘서 로그아웃 처리를 할때 사용 할 수 있게 미리 담아둔다.</p>

<p>이제 각 client 에게 로그인을 했다는 정보를 보내주는 과정이다. 위에 소스를 보면 두가지 이벤트를 실행하게 된다. joinok 와 nicknames 이렇게 두개를 처리하는 이유는 여러 사람에게 나 로그인 했다~ 라고 보내주는것과 또 하나는 내 화면에 나 로그인 했다~ 라고 뿌려주는 역할을 따로 따로 하기 때문이다.</p>

<p>여기서 broadcast 에 대한 설명은 <a href="https://twitter.com/#!/firejune" title="@firejune">@firejune</a>님의 블로그에서 자세한 설명을 볼 수 있다.</p>

<p><a href="http://firejune.com/1700" title="Socket.IO 학습 - 퍼블릭/브로드캐스트/프라이빗 구분">Socket.IO 학습 - 퍼블릭/브로드캐스트/프라이빗 구분</a></p>

<p>이제 index.html 에서 joinok 이벤트와 nicknames 이벤트를 보면 joinok 는 기본 닉네임 리스트에 내가 쓴 닉네임을 추가 시켜주고 전체 nicknames 를 가져와서 nicklist를 다시 그려주게 된다. 전체 닉네임을 갱신한다고 생각하면 될꺼 같다.</p>

<p>로그아웃은 따로 로그아웃 버튼이 있는건 아니고 단지 페이지를 빠져 나가게 되면 로그아웃이라고 생각하면 될꺼 같다. 그래서 server.js 를 보게되면 disconnect 이 일어 났을때 로그인을 했을때 socket.nickname 에 넣었던 닉네임을 nicklist 객체에서 delete 해준다.</p>

<p>그리고 다시 socket.broadcast.emit() 로 전체 client에게 nicknames 이벤트를 호출해서 로그인 리스트를 갱신하게 된다. 그러면 로그아웃한 회원을 제외한 나머지 사람들 리스트만 보이게 된다. 여기서 왜 자신꺼는 이벤트를 호출을 안하는지 혹시 의문이 들수도 있는데 이건 생각해보면 당연한거다 내껀 페이지를 빠져 나오거나 페이지 자체를 갱신했기때문이다. 이렇게 해서 로그인, 로그아웃 구현을 끝냈다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Node.js 이용해서 chat을 만들어보자[2]]]></title>
    <link href="http://J2P.github.com/blog/2011/11/21/node-chat2/"/>
    <updated>2011-11-21T10:08:00+09:00</updated>
    <id>http://J2P.github.com/blog/2011/11/21/node-chat2</id>
    <content type="html"><![CDATA[<p>오늘은 socket.io를 사용해서 서버와 통신(connection, disconnection)이 어떻게 가능한지 확인해볼까 한다.</p>

<p>먼저 서버와의 통신을 확인하기 위해서 다음과 같이 server.js 와 index.html 소스를 수정한다.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>server.js  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">).</span><span class="nx">createServer</span><span class="p">(</span><span class="nx">handler</span><span class="p">).</span><span class="nx">listen</span><span class="p">(</span><span class="mi">5023</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,</span> <span class="nx">io</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;socket.io&#39;</span><span class="p">).</span><span class="nx">listen</span><span class="p">(</span><span class="nx">app</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">function</span> <span class="nx">handler</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">__dirname</span> <span class="o">+</span> <span class="s1">&#39;/index.html&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">500</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="s1">&#39;Error loading index.html&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">res</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span> <span class="s1">&#39;Content-Type&#39;</span><span class="o">:</span> <span class="s1">&#39;text/html&#39;</span><span class="p">});</span>
</span><span class='line'><span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">// 기존 소스에 이부분 추가</span>
</span><span class='line'><span class="nx">io</span><span class="p">.</span><span class="nx">sockets</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;connection&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">socket</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;log : in&#39;</span><span class="p">);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;disconnect&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;log : out&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>index.html  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="ni">&amp;lt;</span>!DOCTYPE html&gt;
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>meta charset=&quot;utf-8&quot;<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>title<span class="ni">&amp;gt;</span>JP Chat<span class="ni">&amp;lt;</span>/title<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>script src=&quot;http://code.jquery.com/jquery-1.7.min.js&quot;<span class="ni">&amp;gt;&amp;lt;</span>/script<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>script src=&quot;http://J2P.github.com/socket.io/socket.io.js&quot;<span class="ni">&amp;gt;&amp;lt;</span>/script<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>form id=&quot;set-nickname&quot;<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>label<span class="ni">&amp;gt;</span>닉네임을 입력해주세요: <span class="ni">&amp;lt;</span>/label<span class="ni">&amp;gt;&amp;lt;</span>input type=&quot;text&quot; id=&quot;nick&quot; /<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/form<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>div id=&quot;nicknames&quot;<span class="ni">&amp;gt;&amp;lt;</span>/div<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>script<span class="ni">&amp;gt;</span>
</span><span class='line'>//socket connect script 추가
</span><span class='line'>    var socket = io.connect(&#39;http://localhost:5023&#39;);
</span><span class='line'><span class="ni">&amp;lt;</span>/script<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Server, Client 소스에 socket 통신을 하기 위해서 추가된 부분이 있다 어떤 동작을 하는지 눈으로 확인해 보도록 하겠다.</p>

<p>socket.io 사이트에 <a href="http://socket.io/#how-to-use" title="how to use">how to use</a> 에서 확인을 해보면 다음과 같은 부분이 있다.</p>

<blockquote><p>Besides <code>connect</code>, <code>message</code> and <code>disconnect</code>, you can emit custom events</p></blockquote>

<p>해석해 보면 connect, message, disconnect 외에도 다른 이벤트를 만들어서  사용할 수 있다는 내용이다. 기본적으로 제공되는 event 인 connect, disconnect 를 통해서 Server와 Client 사이에 통신이 가능한지 확인해보자.</p>

<p>socket.io 사이트에서 예제 소스를 보면 Server 와 Client가 connection이 이루어져야 socket 통신이 가능하다는걸 알 수 있다.</p>

<p>index.html 파일을 보게 되면 io.connect() method 에 socket 통신을 하고자 하는 Server url을 넘겨 connect event 를 호출하게 된다.</p>

<p>Server에서는 connection 이벤트를 호출하게 되어 함수를 호출하게 되고 터미널에는 <strong>log : in</strong> 이 찍히게 된다. disconnect 이벤트는 connect 이벤트 안에 있는걸 볼 수 있는데 이것은 단순하게 생각하면 접속을 해야 접속을 끊는 것도 가능하기 때문이라고 생각한다. 그래서 disconnect event가 발생하게 되면 터미널에 <strong>log : out</strong> 을 찍게 된다.</p>

<p>그럼 connection, disconnect가 이루어질때 터미널에 로그가 남는지 확인해보자.</p>

<p><img class="center" src="/images/socket_io_test.png" title="&#34;connect, disconnect 확인&#34;" alt="&#34;connect, disconnect 확인&#34;"></p>

<p>위 화면과 같이 index.html 에 접속했을때 <strong>log : in</strong> 을 터미널에서 확인 할 수 있고, 페이지를 나오게 되면 <strong>log : out</strong> 을 터미널에서 확인 할 수 있다.</p>

<p>이렇게 해서 socket.io를 통해서 Server와 Client 사이에 connection, disconnection이 이루어 지는걸 확인 할 수 있었다.</p>

<p>이제 Server 와 Client 사이에 socket통신이 가능 하게 되었다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OctoverSky.js & JScamp 후기]]></title>
    <link href="http://J2P.github.com/blog/2011/11/21/seminar-postscript/"/>
    <updated>2011-11-21T09:47:00+09:00</updated>
    <id>http://J2P.github.com/blog/2011/11/21/seminar-postscript</id>
    <content type="html"><![CDATA[<p>2011년 11월 19일 토요일 하루만에 두개의 세미나를 다녀왔다.</p>

<p>이렇게 주말에 세미나에 다니면 집사람과 아들에게 눈치도 보이기도 하고, 몸도 힘들지만 세미나에 다녀오면 몬가 얻은 기분도 들고 여러 사람들을 만나 보면서 다른 사람들은 어떻게 자신을 발전시키고 어떤것들을 하고 있는지 볼 수 있어서 좋다고 생각한다. 그리고 동기부여(?) 같은것도 얻을 수 있어서 세미나에 자주 다니는 편이다.</p>

<p>이번에도 역시 몬가 해야 겠다는 생각과 함께 얻은 것들이 있었다. 그래서 나름 유익한 시간이 였다고 생각한다.</p>

<h2>OctoberSky.js</h2>

<p>먼저 오전에 다녀온 OctoberSky.js 라는 node.js 온라인 스터디의 첫번째 오프라인 모임이였다.</p>

<p>onoffmix에서 처음 알게되고 신청했을때는 대기자에 있었는데 다행이도 <a href="https://twitter.com/#!/doortts" title="@doortts">@doortts</a>님께서 불편하지만 않다면 참석해도 된다고 하셔서 간신히 참석하게 되었다. 근데 당일날 확인해 보니 많은 분들이 취소를 하셔서 신청자 명단으로 올라가 있었다.</p>

<p>장소는 압구정 컨시어지 아카데미에서 진행되었는데 다 좋았지만 찾아가기가 좀 힘들었다. 내가 길치라서 그런건지 일찍 나오지 않았다면 한참 늦게 도착했을 것 같다.</p>

<p>진행 내용은 다음과 같다.</p>

<ul>
<li>간략한 발표 듣기</li>
<li>Cloud9 IDE에서의 개발 - 형주 님</li>
<li>자바스크립트 코어 - Prototype Chain &amp; Closure - 병주 님</li>
<li>node.js 적용 경험담 듣기 - 준호 님</li>
<li>ECMAScript 변천사 - 응준 님</li>
<li>진행한 스터디 진도 만큼 함께 살펴보기</li>
</ul>


<p>대략 25명정도의 인원이 모였는데 이런저런 스터디에 대한 얘기를 시작으로 자기소개를 했다ㅡㅡ;;</p>

<p>요즘 들어 세미나에서 자기소개를 두번째 했는데... 다른분들은 재미있게, 조리있게 말씀들을 참 잘하시는거 같다. 난 왜이렇게 떨리는지 말도 어버버 하고 말잘하는 연습좀 해야겠다 ㅋ;</p>

<p>이렇게 자기 소개를 맞치고 Cloud9 IDE에 대한 소개를 형주님이 해주셨다. 간단한 소개와 함께 사용방법에 대해서 설명해주시고 현재 스터디를 어떻게 작업하는 방법에 대해서 얘기해주셨다.</p>

<p>두번째 자바스크립트 코어에 대한 설명을 병주님이 해주셨다. 공부를 위해서 직접 발표를 신청하셨다고 한다. 정말 멋진거 같다. 난 왜 저런 자신감이 없는건지... 저런 자세는 배워야 한다!!</p>

<p>발표 내용은 Prorotype Chain &amp; Closure 에 대한 정리를 해서 설명을 해주셨는데 개념을 잡기에 아주 좋은 내용을 잘 조리 있게 잘설명해주신거 같다. 알고 있는걸 다시한번 짚어 볼수 있는 시간이였다.</p>

<p>다음으로 이번 세미나의 최대 하이라이트 였던 준호님의 발표 시간이 였다.
내용은 node.js 사용후기? 경험담? 만들었던것들? 을 보여주시면서 재미있게 설명을 해주셨다. 정말 준호님은 대단하다는 생각이 들정도로 많은 것들을 만들어 보시고 적용해서 블로그에서 사용중이시고 멋지다는 생각이 들었다.</p>

<p>역시 무엇이든 만들어 봐야 배울수 있다는 생각이 든다. 이론도 이론이지만 만들어 보는거 만큼 좋은게 없다고 생각이 든 발표 였다. 다음에 꼭 FRENDS모임에 오셔서 한번더 발표해주시면 정말 좋은 시간이 될꺼 같다.</p>

<p>다음은 ECMAScript의 발표 였는데... 발표자분과 자리를 마련해주신분께 죄송한 마음이 들었지만... 다음 세미나 장소로 이동하였다. 나중에 들은 생각이지만 다음부턴 절대로 이런 행동은 하지 말아야 겠다는 생각이들 었다.</p>

<h2>jscamp</h2>

<p>이 세미나는 NHN, Daum 프론트앤드 개발자 분들이 모여서 처음 시작하게된 모임이였다. 국내 양대 포털회사 개발자 분들이 개발자로서 교류하는 모습이 좋아 보였다.</p>

<p>진행 내용은 다음과 같다.</p>

<ul>
<li>컨퍼런스 개회 및 소개 박재성(NHN)</li>
<li>우리 회사 이야기, 우리 회사 개발 이야기 송승렬(NHN), 유경민(Daum)</li>
<li>Titanium - javascript 이용한 크로스플랫폼 App개발 이종은(Daum)</li>
<li>node.js 가 뭐야? 먹는거야? 손병대(NHN)</li>
<li>웹 기반 하이퍼포먼스 그래픽 처리 문경두(Daum)</li>
<li>Hudson 과 Selenium을 이용한 QUnit 테스트 자동화 김민종(NHN)</li>
<li>즉석 질의 응답, 무엇이든 물어보세요!</li>
</ul>


<p>조금 늦게 도착해서 컨퍼런스 개회 및 소개는 잘 듣지 못했다.</p>

<p>우리 회사 이야기, 우리 회사 개발 이야기 회사 개발방식에 대한 내용이 였다. 다른 회사들은 저런 방식으로 개발을 하는구나 라는걸 볼수 있어서 나름 괜찮았다. 한편으로는 불필요한 내용인거 같기도 했다.</p>

<p>Titanium 발표는 생각지도 않은 부분이 였지만 발표자분께서 살짝 라이브 코딩을 보여주시면서 Titanium에 대한 장점들을 보여주시고 앞으로 어떻게 발전해 나갈것인지 어떤점들이 좋은지 단점은 어떤것들이 있는지 잘 설명해주신거 같다. 개인적인 생각으로 전체 발표중에서 제일 좋았다고 생각한다.</p>

<p>역시 발표하는 사람은 유머러스한 면이 있어야 많은 사람들이 좋아하는거 같다.</p>

<p>node.js 에대한 얘기를 그냥 node.js를 아는 사람에게는 그닥 불필요한 내용이 였다 하지만 node.js 무엇인지 처음 들어본 분들에게는 아~ 이런 기술이 있구나 하고 알게 되고 사용해볼 생각을 같게될수 있는 발표 였다고 생각한다.</p>

<p>웹 기반 하이퍼포먼스 그래픽 처리 canvas, webGL, css에 대한 그래픽 처리에 대한 발표 였다. 발표자 분이 응근 재미있게 발표해 주셔서 나름 재미있는 발표 였다고 생각한다. 예제를 보여 주셨던것이 좋았던거 같다. 개인적으로 canvas, webGL보단 css 부분이 내가 사용해 보기엔 좋은것들이 였다고 생각한다.</p>

<p>Hudson, SElenium 을 이용한 Qunit테스트 자동화 사실 이 발표가 제일 기대 되고 꼭 듣고 싶었었다.
항상 테스트에 대한 내용을 접하게 되면 느끼는 거지만 저것들은 왜 구지 저렇게 하는 것일까? 라는 생각을 했었다. 하지만 자동화를 통해서 사용을 한다면 테스트는 좋은 부분들이 많을거 같다. 일단 어떤 방법이 있는지 알았으니 찾아보고 적용해 보는건 내 몫이라고 생각한다. 좀더 검색해보고 테스트 해봐야 할 부분인거 같다.</p>

<p>이렇게 해서 두번째 세미나도 끝이 났다.</p>

<p>힘들 하루 였지만 얻는것도 많은 하루 였다. 우리 FRENDS 에서도 이런 세미나가 빠른 시일에 이루어 지면 재미있을꺼 같다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Node.js 이용해서 chat을 만들어보자[1]]]></title>
    <link href="http://J2P.github.com/blog/2011/11/14/node-chat/"/>
    <updated>2011-11-14T19:13:00+09:00</updated>
    <id>http://J2P.github.com/blog/2011/11/14/node-chat</id>
    <content type="html"><![CDATA[<p>그동안 node.js 에 대해서 맨날 보기만 하다가 H3 채팅을 보고 직접 만들어 보고 싶다는 생각이 들었다.
그래서 간단한 채팅을 만들어 볼려고 한다.</p>

<p>오늘은 기본적인 web server 구동을 시작해보겠다. 아래 소스는 github Repositorie에 올리면서 진행하려고 한다. nodester에서 호스팅을 받아서 nodester쪽에서도 확인해볼수 있다.</p>

<ul>
<li><a href="https://github.com/J2P/j2p_chat" title="github">https://github.com/J2P/j2p_chat</a></li>
<li><a href="http://j2p_chat.nodester.com/" title="nodester">http://j2p_chat.nodester.com/</a></li>
</ul>


<p>먼저 채팅을 만들기 위해서 기본적으로 socket 통신을 해야 하므로 npm을 이용해서 socket.io를 설치했다.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>npm install  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>npm install socket.io
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>socket.io를 설치하면 examples 디렉토리 안에 chat이 있는데 express 이외에도 많은 모듈을 사용해서 만들어져있다. 나는 단순한 socket 통신을 하는거만 보기 위한거라서 다른 모듈 없이 socket.io 만 사용해서 만들어 볼려고 한다. 소스는 socket.io/examples/chat 소스를 바탕으로 작업을 했다.</p>

<p>우선 가장 기본적인 부분인 Web Server 구현해 볼려고한다.</p>

<p>필요한 파일은 서버쪽 server.js 파일과 클라이언트 페이지 index.html 이 필요하다.</p>

<h3>Server.js</h3>

<p>서버쪽에서 Web Server가 구동되야 하므로 server.js 에 다음을 추가한다.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>server.js  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">).</span><span class="nx">createServer</span><span class="p">(</span><span class="nx">handler</span><span class="p">).</span><span class="nx">listen</span><span class="p">(</span><span class="mi">5023</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,</span> <span class="nx">io</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;socket.io&#39;</span><span class="p">).</span><span class="nx">listen</span><span class="p">(</span><span class="nx">app</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">function</span> <span class="nx">handler</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">__dirname</span> <span class="o">+</span> <span class="s1">&#39;/index.html&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">500</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="s1">&#39;Error loading index.html&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">res</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span> <span class="s1">&#39;Content-Type&#39;</span><span class="o">:</span> <span class="s1">&#39;text/html&#39;</span><span class="p">});</span>
</span><span class='line'><span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>대략 소스를 보면 http, socket.io, fs 모듈을 사용하고 있다.</p>

<p>여기서 http 모듈은 서버를 생성할때 handler 함수를 인자값으로 넘겨줘서 서버를 Web Server 를 생성하고 port 5023(port 번호는 마음대로 설정해도 된다) 으로 접근할수 있게 설정했다.</p>

<p>handler 함수는 예전부터 가장 궁금했던 부분중에 하나인 html 파일을 어떻게 보여주는지 궁금했었는데 그부분을 구현한 함수 부분이다. fs 모듈을 이용해서 index.html 파일을 읽어서 보여주게 된다.</p>

<p>파일을 읽는중 문제가 생기게 되면 다음과 같이 500 에러가 발생하고 메시지를 보여주게 된다.</p>

<p><img class="center" src="/images/500_err.png" title="&#34;500 err&#34;" alt="&#34;500 err&#34;"></p>

<p>handler 함수에서 fs.readFiel() method 에 index.html 파일을 인자값으로 넘겨줄때 <a href="http://nodejs.org/docs/v0.6.1/api/globals.html#__dirname" title="__dirname">__dirname</a> 이 있는데 nodejs doc에서 확인을 해보면 __dirname 은 node.js의 global Object로 현재 스크립트파일의 위치를 담고 있는 객체인걸 알 수 있다.</p>

<p>socket.io 모듈은 listen Method는 인자값으로 http 모듈을 담고 있는 app 변수를 넘겨준다.
나름 해석해보면 socket.io 가 Web Server를 항상 듣고 있는 모 그런거 같다 ㅋ;;.</p>

<h3>index.html</h3>

<p>server.js 에서 index.html을 읽어들여서 보여주기 위해서 index.html 에 간단한 닉네임 입력창을 넣어준다.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>index.html  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="ni">&amp;lt;</span>!DOCTYPE html&gt;
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>meta charset=&quot;utf-8&quot;<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>title<span class="ni">&amp;gt;</span>JP Chat<span class="ni">&amp;lt;</span>/title<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>script src=&quot;http://code.jquery.com/jquery-1.7.min.js&quot;<span class="ni">&amp;gt;&amp;lt;</span>/script<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>script src=&quot;http://J2P.github.com/socket.io/socket.io.js&quot;<span class="ni">&amp;gt;&amp;lt;</span>/script<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>form id=&quot;set-nickname&quot;<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>label<span class="ni">&amp;gt;</span>닉네임을 입력해주세요: <span class="ni">&amp;lt;</span>/label<span class="ni">&amp;gt;&amp;lt;</span>input type=&quot;text&quot; id=&quot;nick&quot; /<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/form<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>div id=&quot;nicknames&quot;<span class="ni">&amp;gt;&amp;lt;</span>/div<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>클라이언트에서도 jQuery &amp; socket.io를 쓰기위해서 jquery-1.7.min.js 와 socket.io.js 를 추가해 주었다.</p>

<p>그러면 Web Server가 잘 동작하는지 확인해 보자. 터미널에서 다음과 같이 서버를 시작하고 브라우져에서 확인해보자.</p>

<p><img class="center" src="/images/server.png" title="&#34;server&#34;" alt="&#34;server&#34;"></p>

<p>브라우져에서 확인해보면 다음과 같이 input 박스를 확인할수 있다.</p>

<p><img class="center" src="/images/web.png" title="&#34;client&#34;" alt="&#34;client&#34;"></p>

<p>다음엔 닉네임 입력을 하고 채팅방에 join 하는 것을 구현해 보겠다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NVM Use Node.JS]]></title>
    <link href="http://J2P.github.com/blog/2011/10/17/nvm-use-nodejs/"/>
    <updated>2011-10-17T23:49:00+09:00</updated>
    <id>http://J2P.github.com/blog/2011/10/17/nvm-use-nodejs</id>
    <content type="html"><![CDATA[<p>nvm은 <a href="https://github.com/creationix/nvm" title="node version manager">Node Version Manager</a> 이다.</p>

<p>말 그대로 Node.JS 버전을 따로 관리 해주는 쉘? 프로그래밍? 이라고 해야하나...
그냥 라이브러리? 라고 해야 하나... 어떻게 불러야 할지 그건 잘모르겠다.
암튼 버전이 올라 가거나 혹은 다른 버전을 사용해보고 싶을때
버전별로 따로 받아서 설치 할 필요없이 nvm 을 통해서
사용 하고자 하는 Node.JS 버전을 받아서 설치하고 선택한 버전을 이용할 수 있다.
설치 방법은 github 에서 clone 받아서 사용하면 된다.</p>

<h3>github clone</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>NVM github</span><a href='https://github.com/creationix/nvm'>github </a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git://gigthub.com/creationix/nvm.git ~/.nvm</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>nvm.sh 실행</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>NVM 실행 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>. ~/.nvm/nvm.sh         //osx
</span><span class='line'>. $HOME/.nvm/nvm.sh //ubuntu</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>설치는 위와 같이 간단하다.</p>

<p>명령어는 다음과 같다.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>nvm help </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nvm help</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>nvm 명령어를 화면에 보여준다.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>nvm install </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nvm install &lt;version></span></code></pre></td></tr></table></div></figure></notextile></div>
선택한 Node.JS 버전을 설치한다.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>nvm use </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nvm use &lt;version></span></code></pre></td></tr></table></div></figure></notextile></div>
선택한 Node.JS 버전을 사용한다. (사용려는 버전이 설치 되어 있어야 한다)</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>nvm use </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nvm use stable
</span><span class='line'>nvm use latest</span></code></pre></td></tr></table></div></figure></notextile></div>
stable, latest 버전을 사용한다.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>nvm ls </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nvm ls</span></code></pre></td></tr></table></div></figure></notextile></div>
버전 리스트를 보여준다.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>nvm ls version </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nvm ls &lt;version></span></code></pre></td></tr></table></div></figure></notextile></div>
버전 리스트에서 선택한 버전만 보여준다.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>nvm deactivate </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nvm deactivate&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>/Users/jjp5023/.nvm/&lt;em>/bin removed from $PATH
</span><span class='line'>/Users/jjp5023/.nvm/&lt;/em>share/man removed from $MANPATH</span></code></pre></td></tr></table></div></figure></notextile></div>
실행 하면 위와 같이 나오는것을 보아 Node.JS PATH 연결을 끊어준다.
다시 사용 하려면 nvm use <version> 하면 사용 할 수 있게 된다.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>nvm alias </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nvm alias [&lt;pattern>]</span></code></pre></td></tr></table></div></figure></notextile></div>
alias 설정한 것을 보여준다. pattern 값으로 검색해서 보여줄수도 있다.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>nvm alias </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nvm alias &lt;name>&lt;version></span></code></pre></td></tr></table></div></figure></notextile></div>
선택한 버전을 원하는 이름으로 alias 걸어 주는 명령어 이다.
nvm ls 에서 확인 할 수 있다.
nvm use <name> 하면 alias 한 이름으로 간단하게 원하는 버전을 사용 할 수있다.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>nvm copy-package </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nvm copy-packages &lt;version></span></code></pre></td></tr></table></div></figure></notextile></div>
선택한 version에 포함된 global 패키지를 설치한다. 설명을 해석하면 이러한데...
정확하게 어떤 용도인지는 잘 모르겠다.</p>
]]></content>
  </entry>
  
</feed>
